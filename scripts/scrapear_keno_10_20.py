# keno_prediction_app.py

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from collections import Counter
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
from sklearn.preprocessing import MultiLabelBinarizer

@st.cache_data

def load_data():
    df = pd.read_csv("C:/Users/pablo/OneDrive/Escritorio/italia_20/sorteos_lotto_10_20_sin_n11.csv")
    df["hora"] = pd.to_datetime(df["fecha_hora"], format="%d-%m-%Y %H:%M").dt.hour
    numeros_cols = [f"n{i}" for i in range(1, 11)]
    df["numeros"] = df[numeros_cols].values.tolist()
    return df


def build_model(X, y):
    model = Sequential([
        Dense(64, activation='relu', input_shape=(X.shape[1],)),
        Dense(64, activation='relu'),
        Dense(20, activation='sigmoid')
    ])
    model.compile(optimizer=Adam(0.001), loss='binary_crossentropy', metrics=['accuracy'])
    model.fit(X, y, epochs=30, batch_size=16, verbose=0)
    return model


def predict_top_n(model, input_array, n):
    probas = model.predict(input_array, verbose=0)[0]
    return np.argsort(probas)[::-1][:n] + 1

st.set_page_config(page_title="Predicci√≥n Italia Keno", page_icon="üî¢", layout="centered")
st.title("üî¢ Predicci√≥n Italia Keno por Hora")
df = load_data()
mlb = MultiLabelBinarizer(classes=list(range(1, 21)))
df["bin"] = mlb.fit_transform(df["numeros"]).tolist()

st.sidebar.header("Opciones de visualizaci√≥n")
mostrar_frecuencias = st.sidebar.checkbox("üìä Ver estad√≠sticas hist√≥ricas por hora", value=True)

hora = st.selectbox("Selecciona la hora para analizar", sorted(df["hora"].unique()))
df_hora = df[df["hora"] == hora].copy()

if df_hora.empty:
    st.error("‚ùå No hay sorteos para esta hora.")
    st.stop()

if len(df_hora) < 10:
    st.warning("‚ö†Ô∏è Hay pocos sorteos para esta hora. Los resultados podr√≠an no ser fiables.")
else:
    st.success(f"Se usar√°n {len(df_hora)} sorteos para la hora {hora}:00")

try:
    X = np.ones((len(df_hora), 1)) * hora
    y = mlb.transform(df_hora["numeros"])
except Exception as e:
    st.error(f"‚ùå Error al preparar los datos de entrenamiento: {e}")
    st.stop()

try:
    model = build_model(X, y)
except Exception as e:
    st.error(f"‚ùå Error al entrenar el modelo: {e}")
    st.stop()

input_array = np.array([[hora]])

st.subheader("üéØ Predicci√≥n de N√∫meros por Hora")
resultados = {}
for n in [1, 2, 3, 4]:
    topn = predict_top_n(model, input_array, n)
    resultados[n] = topn
    st.write(f"üîπ Top {n}: {list(topn)}")

st.subheader("üìä Evaluaci√≥n hist√≥rica del Top-N")
for n in [1, 2, 3, 4]:
    aciertos = sum(
        any(num in sorteados for num in resultados[n])
        for sorteados in df_hora["numeros"]
    )
    total = len(df_hora)
    st.write(f"‚úÖ Top {n} acert√≥ al menos un n√∫mero en {aciertos}/{total} sorteos ‚Üí {aciertos/total:.2%}")

if mostrar_frecuencias:
    st.subheader("üèÜ N√∫mero m√°s frecuente entre los 10 sorteados a esa hora")
    todos = [num for sublist in df_hora["numeros"] for num in sublist]
    conteo = Counter(todos)
    mas_comun = conteo.most_common(1)[0]
    st.write(f"üî¢ El n√∫mero m√°s frecuente a las {hora}:00 fue el **{mas_comun[0]}**, con {mas_comun[1]} apariciones.")

    st.subheader("üìä Top 10 n√∫meros m√°s frecuentes a esa hora")
    top10 = conteo.most_common(10)
    nums = [x[0] for x in top10]
    freqs = [x[1] for x in top10]

    fig, ax = plt.subplots()
    ax.bar(nums, freqs, color='skyblue')
    ax.set_xlabel("N√∫mero")
    ax.set_ylabel("Frecuencia")
    ax.set_title(f"Top 10 n√∫meros m√°s frecuentes a las {hora}:00")
    st.pyplot(fig)
